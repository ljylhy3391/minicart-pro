// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(CUSTOMER)
  emailVerified DateTime? @map("email_verified")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
  orders        Order[]
  reviews       Review[]
  couponUsage   CouponUsage[]

  @@map("users")
}

model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token") @db.Text
  accessToken       String? @map("access_token") @db.Text
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token") @db.Text
  sessionState      String? @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String     @unique
  description String?
  imageUrl    String?    @map("image_url")
  parentId    String?    @map("parent_id") @db.Uuid
  sortOrder   Int        @default(0) @map("sort_order")
  isActive    Boolean    @default(true) @map("is_active")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String
  slug             String        @unique
  description      String?
  shortDescription String?       @map("short_description")
  price            Decimal       @db.Decimal(10, 2)
  comparePrice     Decimal?      @map("compare_price") @db.Decimal(10, 2)
  costPrice        Decimal?      @map("cost_price") @db.Decimal(10, 2)
  sku              String?       @unique
  barcode          String?
  weight           Decimal?      @db.Decimal(8, 2)
  dimensions       Json?
  categoryId       String?       @map("category_id") @db.Uuid
  brand            String?
  status           ProductStatus @default(DRAFT)
  featured         Boolean       @default(false)
  metaTitle        String?       @map("meta_title")
  metaDescription  String?       @map("meta_description")
  tags             String[]
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  category       Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images         ProductImage[]
  variants       ProductVariant[]
  reviews        Review[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  url       String
  altText   String?  @map("alt_text")
  sortOrder Int      @default(0) @map("sort_order")
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  name         String
  sku          String?  @unique
  price        Decimal? @db.Decimal(10, 2)
  comparePrice Decimal? @map("compare_price") @db.Decimal(10, 2)
  costPrice    Decimal? @map("cost_price") @db.Decimal(10, 2)
  weight       Decimal? @db.Decimal(8, 2)
  attributes   Json
  imageUrl     String?  @map("image_url")
  sortOrder    Int      @default(0) @map("sort_order")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory Inventory?
  cartItems CartItem[]
  orderItems OrderItem[]

  @@map("product_variants")
}

model Inventory {
  id                  String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  variantId           String  @unique @map("variant_id") @db.Uuid
  quantity            Int     @default(0)
  reservedQuantity    Int     @default(0) @map("reserved_quantity")
  lowStockThreshold   Int     @default(10) @map("low_stock_threshold")
  location            String?
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Cart {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @unique @map("user_id") @db.Uuid
  sessionId String?  @unique @map("session_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user  User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("cart")
}

model CartItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId    String   @map("cart_id") @db.Uuid
  variantId String   @map("variant_id") @db.Uuid
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderNumber     String      @unique @map("order_number")
  userId          String?     @map("user_id") @db.Uuid
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  taxAmount       Decimal     @default(0) @map("tax_amount") @db.Decimal(10, 2)
  shippingAmount  Decimal     @default(0) @map("shipping_amount") @db.Decimal(10, 2)
  discountAmount  Decimal     @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  currency        String      @default("KRW")
  shippingAddress Json        @map("shipping_address")
  billingAddress  Json?       @map("billing_address")
  notes           String?
  internalNotes   String?     @map("internal_notes")
  confirmedAt     DateTime?   @map("confirmed_at")
  shippedAt       DateTime?   @map("shipped_at")
  deliveredAt     DateTime?   @map("delivered_at")
  cancelledAt     DateTime?   @map("cancelled_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  user         User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  items        OrderItem[]
  payments     Payment[]
  reviews      Review[]
  couponUsage  CouponUsage[]

  @@map("orders")
}

model OrderItem {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId      String   @map("order_id") @db.Uuid
  variantId    String?  @map("variant_id") @db.Uuid
  productName  String   @map("product_name")
  variantName  String?  @map("variant_name")
  sku          String?
  price        Decimal  @db.Decimal(10, 2)
  quantity     Int
  totalPrice   Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model Payment {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId               String        @map("order_id") @db.Uuid
  impUid                String        @unique @map("imp_uid") // 아임포트 거래 고유 ID
  merchantUid           String        @map("merchant_uid") // 주문번호
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("KRW")
  status                PaymentStatus @default(PENDING)
  paymentMethod         String?       @map("payment_method") // card, vbank, phone, kakao, naver, payco, toss
  paymentMethodDetails  Json?         @map("payment_method_details")
  failureReason         String?       @map("failure_reason") @db.Text
  refundAmount          Decimal       @default(0) @map("refund_amount") @db.Decimal(10, 2)
  refundReason          String?       @map("refund_reason") @db.Text
  paidAt                DateTime?     @map("paid_at")
  failedAt              DateTime?     @map("failed_at")
  cancelledAt           DateTime?     @map("cancelled_at")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Coupon {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code            String      @unique
  name            String
  description     String?
  type            CouponType
  value           Decimal     @db.Decimal(10, 2)
  minimumAmount   Decimal?    @map("minimum_amount") @db.Decimal(10, 2)
  maximumDiscount Decimal?    @map("maximum_discount") @db.Decimal(10, 2)
  usageLimit      Int?        @map("usage_limit")
  usedCount       Int         @default(0) @map("used_count")
  isActive        Boolean     @default(true) @map("is_active")
  startsAt        DateTime?   @map("starts_at")
  expiresAt       DateTime?   @map("expires_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  usage CouponUsage[]

  @@map("coupons")
}

model CouponUsage {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couponId      String   @map("coupon_id") @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  orderId       String   @map("order_id") @db.Uuid
  discountAmount Decimal @map("discount_amount") @db.Decimal(10, 2)
  usedAt        DateTime @default(now()) @map("used_at")

  // Relations
  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([couponId, userId, orderId])
  @@map("coupon_usage")
}

model Review {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  orderId      String?  @map("order_id") @db.Uuid
  rating       Int
  title        String?
  content      String?  @db.Text
  isVerified   Boolean  @default(false) @map("is_verified")
  isApproved   Boolean  @default(true) @map("is_approved")
  helpfulCount Int      @default(0) @map("helpful_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

  @@unique([productId, userId, orderId])
  @@map("reviews")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SELLER

  @@map("user_role")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED

  @@map("product_status")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED

  @@map("order_status")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED

  @@map("payment_status")
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT

  @@map("coupon_type")
}

