// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// NextAuth.js 테이블들
model Account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// 사용자 관련 테이블
model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  cart     Cart?
  couponUsage CouponUsage[]

  @@map("users")
}

enum UserRole {
  CUSTOMER @map("customer")
  ADMIN    @map("admin")
  SELLER   @map("seller")
}

// 상품 관련 테이블
model Category {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String    @unique
  description String?   @db.Text
  imageUrl    String?   @map("image_url") @db.Text
  parentId    String?   @map("parent_id") @db.Uuid
  sortOrder   Int       @default(0) @map("sort_order")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  products  Product[]
  parent    Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryParent")

  @@map("categories")
}

model Product {
  id              String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  slug            String         @unique
  description     String?        @db.Text
  shortDescription String?       @map("short_description") @db.Text
  price           Decimal        @db.Decimal(10, 2)
  comparePrice    Decimal?       @map("compare_price") @db.Decimal(10, 2)
  costPrice       Decimal?       @map("cost_price") @db.Decimal(10, 2)
  sku             String?        @unique
  barcode         String?
  weight          Decimal?       @db.Decimal(10, 2)
  dimensions      Json?
  categoryId      String?        @map("category_id") @db.Uuid
  brand           String?
  status          ProductStatus  @default(DRAFT)
  featured        Boolean        @default(false)
  metaTitle       String?        @map("meta_title")
  metaDescription String?        @map("meta_description") @db.Text
  tags            String[]
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  category    Category?        @relation(fields: [categoryId], references: [id])
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     Review[]

  @@map("products")
}

enum ProductStatus {
  DRAFT     @map("draft")
  ACTIVE    @map("active")
  INACTIVE  @map("inactive")
  ARCHIVED  @map("archived")
}

model ProductImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  url       String   @db.Text
  altText   String?  @map("alt_text")
  sortOrder Int      @default(0) @map("sort_order")
  isPrimary Boolean  @default(false) @map("is_primary")
  createdAt DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  name         String
  sku          String?  @unique
  price        Decimal? @db.Decimal(10, 2)
  comparePrice Decimal? @map("compare_price") @db.Decimal(10, 2)
  costPrice    Decimal? @map("cost_price") @db.Decimal(10, 2)
  weight       Decimal? @db.Decimal(10, 2)
  attributes   Json
  imageUrl     String?  @map("image_url") @db.Text
  sortOrder    Int      @default(0) @map("sort_order")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory   Inventory?
  orderItems  OrderItem[]
  cartItems   CartItem[]

  @@map("product_variants")
}

model Inventory {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  variantId         String   @unique @map("variant_id") @db.Uuid
  quantity          Int      @default(0)
  reservedQuantity  Int      @default(0) @map("reserved_quantity")
  lowStockThreshold Int      @default(10) @map("low_stock_threshold")
  location          String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

// 장바구니 테이블
model Cart {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String?   @unique @map("user_id") @db.Uuid
  sessionId  String?   @unique @map("session_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  user  User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("cart")
}

model CartItem {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cartId    String   @map("cart_id") @db.Uuid
  variantId String?  @map("variant_id") @db.Uuid
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("cart_items")
}

// 주문 관련 테이블
model Order {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderNumber    String      @unique @map("order_number")
  userId         String?     @map("user_id") @db.Uuid
  status         OrderStatus @default(PENDING)
  subtotal       Decimal     @db.Decimal(10, 2)
  taxAmount      Decimal     @default(0) @map("tax_amount") @db.Decimal(10, 2)
  shippingAmount Decimal     @default(0) @map("shipping_amount") @db.Decimal(10, 2)
  discountAmount Decimal     @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount    Decimal     @map("total_amount") @db.Decimal(10, 2)
  currency       String      @default("KRW")
  shippingAddress Json       @map("shipping_address")
  billingAddress Json?       @map("billing_address")
  notes          String?     @db.Text
  internalNotes  String?     @map("internal_notes") @db.Text
  confirmedAt    DateTime?   @map("confirmed_at")
  shippedAt      DateTime?   @map("shipped_at")
  deliveredAt    DateTime?   @map("delivered_at")
  cancelledAt    DateTime?   @map("cancelled_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  user         User?         @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
  payments     Payment[]
  reviews      Review[]
  couponUsage  CouponUsage[]

  @@map("orders")
}

enum OrderStatus {
  PENDING    @map("pending")
  CONFIRMED  @map("confirmed")
  PROCESSING @map("processing")
  SHIPPED    @map("shipped")
  DELIVERED  @map("delivered")
  CANCELLED  @map("cancelled")
  REFUNDED   @map("refunded")
}

model OrderItem {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId     String   @map("order_id") @db.Uuid
  variantId   String?  @map("variant_id") @db.Uuid
  productName String   @map("product_name")
  variantName String?  @map("variant_name")
  sku         String?
  price       Decimal  @db.Decimal(10, 2)
  quantity    Int
  totalPrice  Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

// 결제 테이블
model Payment {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId               String        @map("order_id") @db.Uuid
  paymentIntentId       String        @unique @map("payment_intent_id")
  amount                Decimal       @db.Decimal(10, 2)
  currency              String        @default("KRW")
  status                PaymentStatus @default(PENDING)
  paymentMethod         String?       @map("payment_method")
  paymentMethodDetails  Json?         @map("payment_method_details")
  failureReason         String?       @map("failure_reason") @db.Text
  refundAmount          Decimal       @default(0) @map("refund_amount") @db.Decimal(10, 2)
  refundReason          String?       @map("refund_reason") @db.Text
  stripeChargeId        String?       @map("stripe_charge_id")
  stripeCustomerId      String?       @map("stripe_customer_id")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentStatus {
  PENDING    @map("pending")
  PROCESSING @map("processing")
  SUCCEEDED  @map("succeeded")
  FAILED     @map("failed")
  CANCELLED  @map("cancelled")
  REFUNDED   @map("refunded")
}

// 쿠폰 테이블
model Coupon {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code           String     @unique
  name           String
  description    String?    @db.Text
  type           CouponType
  value          Decimal    @db.Decimal(10, 2)
  minimumAmount  Decimal?   @map("minimum_amount") @db.Decimal(10, 2)
  maximumDiscount Decimal?  @map("maximum_discount") @db.Decimal(10, 2)
  usageLimit     Int?       @map("usage_limit")
  usedCount      Int        @default(0) @map("used_count")
  isActive       Boolean    @default(true) @map("is_active")
  startsAt       DateTime?  @map("starts_at")
  expiresAt      DateTime?  @map("expires_at")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  usages CouponUsage[]

  @@map("coupons")
}

enum CouponType {
  PERCENTAGE    @map("percentage")
  FIXED_AMOUNT  @map("fixed_amount")
}

model CouponUsage {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  couponId       String   @map("coupon_id") @db.Uuid
  userId         String?  @map("user_id") @db.Uuid
  orderId        String?  @map("order_id") @db.Uuid
  discountAmount Decimal  @map("discount_amount") @db.Decimal(10, 2)
  usedAt         DateTime @default(now()) @map("used_at")

  coupon Coupon  @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id])
  order  Order?  @relation(fields: [orderId], references: [id])

  @@map("coupon_usage")
}

// 리뷰 테이블
model Review {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId    String   @map("product_id") @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  orderId      String?  @map("order_id") @db.Uuid
  rating       Int
  title        String?
  content      String?  @db.Text
  isVerified   Boolean  @default(false) @map("is_verified")
  isApproved   Boolean  @default(true) @map("is_approved")
  helpfulCount Int      @default(0) @map("helpful_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order   Order?  @relation(fields: [orderId], references: [id])

  @@unique([productId, userId])
  @@map("reviews")
}
